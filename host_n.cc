//-----------------------------------------
//
// Generated by nedtool, version 3.4
// date: Sat Apr 25 13:22:04 2009
//
//-----------------------------------------


#include <math.h>
#include "omnetpp.h"

// NEDC version check
#define NEDC_VERSION 0x0304
#if (NEDC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedc: 'make clean' should help.
#endif

// Disable warnings about unused variables. For MSVC and BC only:
// GCC has no way to turn on its -Wunused option in a source file :(
#ifdef _MSC_VER
#  pragma warning(disable:4101)
#endif
#ifdef __BORLANDC__
#  pragma warn -waus
#  pragma warn -wuse
#endif

static cModuleType *_getModuleType(const char *modname)
{
    cModuleType *modtype = findModuleType(modname);
    if (!modtype)
        throw new cRuntimeError("Module type definition %s not found (Define_Module() missing from C++ code?)", modname);
    return modtype;
}

static void _checkModuleVectorSize(int vectorsize, const char *mod)
{
    if (vectorsize<0)
        throw new cRuntimeError("Negative module vector size %s[%d]", mod, vectorsize);
}

static void _readModuleParameters(cModule *mod)
{
    int n = mod->params();
    for (int k=0; k<n; k++)
        if (mod->par(k).isInput())
            mod->par(k).read();
}

static int _checkModuleIndex(int index, int vectorsize, const char *modname)
{
    if (index<0 || index>=vectorsize)
        throw new cRuntimeError("Submodule index %s[%d] out of range, sizeof(%s) is %d", modname, index, modname, vectorsize);
    return index;
}

static cGate *_checkGate(cModule *mod, const char *gatename)
{
    cGate *g = mod->gate(gatename);
    if (!g)
        throw new cRuntimeError("%s has no gate named %s",mod->fullPath().c_str(), gatename);
    return g;
}

static cGate *_checkGate(cModule *mod, const char *gatename, int gateindex)
{
    cGate *g = mod->gate(gatename, gateindex);
    if (!g)
        throw new cRuntimeError("%s has no gate %s[%d]",mod->fullPath().c_str(), gatename, gateindex);
    return g;
}

static cGate *_getFirstUnusedParentModGate(cModule *mod, const char *gatename)
{
    int baseId = mod->findGate(gatename);
    if (baseId<0)
        throw new cRuntimeError("%s has no %s[] gate",mod->fullPath().c_str(), gatename);
    int n = mod->gate(baseId)->size();
    for (int i=0; i<n; i++)
        if (!mod->gate(baseId+i)->isConnectedInside())
            return mod->gate(baseId+i);
    throw new cRuntimeError("%s[] gates are all connected, no gate left for `++' operator",mod->fullPath().c_str(), gatename);
}

static cGate *_getFirstUnusedSubmodGate(cModule *mod, const char *gatename)
{
    int baseId = mod->findGate(gatename);
    if (baseId<0)
        throw new cRuntimeError("%s has no %s[] gate",mod->fullPath().c_str(), gatename);
    int n = mod->gate(baseId)->size();
    for (int i=0; i<n; i++)
        if (!mod->gate(baseId+i)->isConnectedOutside())
            return mod->gate(baseId+i);
    int newBaseId = mod->setGateSize(gatename,n+1);
    return mod->gate(newBaseId+n);
}

static cFunctionType *_getFunction(const char *funcname, int argcount)
{
    cFunctionType *functype = findFunction(funcname,argcount);
    if (!functype)
        throw new cRuntimeError("Function %s with %d args not found", funcname, argcount);
    return functype;
}

static cChannel *_createChannel(const char *channeltypename)
{
    cChannelType *channeltype = findChannelType(channeltypename);
    if (!channeltype)
        throw new cRuntimeError("Channel type %s not found", channeltypename);
    cChannel *channel = channeltype->create("channel");
    return channel;
}

static cChannel *_createNonTypedBasicChannel(double delay, double error, double datarate)
{
    cBasicChannel *channel = new cBasicChannel("channel");
    if (delay!=0) channel->setDelay(delay);
    if (error!=0) channel->setError(error);
    if (datarate!=0) channel->setDatarate(datarate);
    return channel;
}

static cXMLElement *_getXMLDocument(const char *fname, const char *pathexpr=NULL)
{
    cXMLElement *node = ev.getXMLDocument(fname, pathexpr);
    if (!node)
        throw new cRuntimeError(!pathexpr ? "xmldoc(\"%s\"): element not found" : "xmldoc(\"%s\", \"%s\"): element not found",fname,pathexpr);
    return node;
}

ModuleInterface(host)
    // parameters:
    Parameter(direccion, ParType_Numeric ParType_Const)
    Parameter(tamTrama, ParType_Numeric ParType_Const)
    // gates:
    Gate(entrada, GateDir_Input)
    Gate(salida, GateDir_Output)
EndInterface

Register_ModuleInterface(host);

class host : public cCompoundModule
{
  public:
    host() : cCompoundModule() {}
  protected:
    virtual void doBuildInside();
};

Define_Module(host);

void host::doBuildInside()
{
    cModule *mod = this;

    // temporary variables:
    cPar tmpval;
    const char *modtypename;

    mod->setBackgroundDisplayString("o=,,;b=208,315,,,,");

    // submodules:
    cModuleType *modtype = NULL;
    int submodindex;

    //
    // submodule 'varAplicacion':
    //
    int varAplicacion_size = 1;
    modtype = _getModuleType("aplicacion");
    cModule *varAplicacion_p = modtype->create("varAplicacion", mod);
    {
        cContextSwitcher __ctx(varAplicacion_p); // do the rest in this module's context

        // parameter assignments:
        varAplicacion_p->par("tamTrama") = mod->par("tamTrama");
        varAplicacion_p->par("direccion") = mod->par("direccion");

        _readModuleParameters(varAplicacion_p);
        varAplicacion_p->setDisplayString("p=98,44;i=abstract/penguin");
    }

    //
    // submodule 'varIntermedio':
    //
    int varIntermedio_size = 1;
    modtype = _getModuleType("intermedio");
    cModule *varIntermedio_p = modtype->create("varIntermedio", mod);
    {
        cContextSwitcher __ctx(varIntermedio_p); // do the rest in this module's context

        _readModuleParameters(varIntermedio_p);
        varIntermedio_p->setDisplayString("p=98,152;i=abstract/switch");
    }

    //
    // submodule 'varEnlace':
    //
    int varEnlace_size = 1;
    modtype = _getModuleType("enlace");
    cModule *varEnlace_p = modtype->create("varEnlace", mod);
    {
        cContextSwitcher __ctx(varEnlace_p); // do the rest in this module's context

        // parameter assignments:
        varEnlace_p->par("tamTrama") = mod->par("tamTrama");
        varEnlace_p->par("direccion") = mod->par("direccion");

        _readModuleParameters(varEnlace_p);
        varEnlace_p->setDisplayString("p=97,245;i=block/plug");
    }

    //
    // connections:
    //
    cGate *srcgate, *destgate;

    cChannel *channel;
    cPar *par;
    // connection
    srcgate = _checkGate(varAplicacion_p, "hacia_abajo");
    destgate = _checkGate(varIntermedio_p, "desde_arriba");
    srcgate->connectTo(destgate);

    // connection
    srcgate = _checkGate(varIntermedio_p, "hacia_arriba");
    destgate = _checkGate(varAplicacion_p, "desde_abajo");
    srcgate->connectTo(destgate);

    // connection
    srcgate = _checkGate(varIntermedio_p, "hacia_abajo");
    destgate = _checkGate(varEnlace_p, "desde_arriba");
    srcgate->connectTo(destgate);

    // connection
    srcgate = _checkGate(varEnlace_p, "hacia_arriba");
    destgate = _checkGate(varIntermedio_p, "desde_abajo");
    srcgate->connectTo(destgate);

    // connection
    srcgate = _checkGate(varEnlace_p, "hacia_fisico");
    destgate = _checkGate(mod, "salida");
    srcgate->connectTo(destgate);

    // connection
    srcgate = _checkGate(mod, "entrada");
    destgate = _checkGate(varEnlace_p, "desde_fisico");
    srcgate->connectTo(destgate);

    // check all gates are connected:
    mod->checkInternalConnections();


    //
    // this level is done -- recursively build submodules too
    //
    varAplicacion_p->buildInside();
    varIntermedio_p->buildInside();
    varEnlace_p->buildInside();
}

